CREATE DATABASE INVENTORY

CREATE TABLE CAREER 
(
	ID 		INT PRIMARY KEY NOT NULL,
	NAME	VARCHAR(255) NOT NULL
);

CREATE TABLE USERS
(
    RUT         INT PRIMARY KEY NOT NULL,
    NAME        VARCHAR(60) NOT NULL,
    LASTNAME    VARCHAR(60) NOT NULL,
    USERNAME    VARCHAR(255) NOT NULL,
	MAIL		VARCHAR(255) NOT NULL,
	TYPE		INT NOT NULL,    /* 1)estudiante 2)profesor 3)administrador*/
	STATUS		INT NOT NULL,	/*1)ACTIVO 0)INACTIVO*/
    CAREER      INT NOT NULL,	/*numero segun carrera*/
    PHONE       VARCHAR(12),
    ADDREES     VARCHAR(255) NOT NULL,
    PASS        VARCHAR(255) NOT NULL,
	FOREIGN KEY (CAREER) REFERENCES CAREER(ID)
);

CREATE TABLE PRODUCT
(
    ID              INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    NAME            VARCHAR(255) NOT NULL,
    DESCRIPTION     VARCHAR(255) NOT NULL,
	STATUS			INT NOT NULL, /*1) ACTIVO 0)INACTIVO*/
    STOCK           INT NOT NULL,
	AVAILABLESTOCK	INT NOT NULL,
    PRICE           INT NOT NULL,
    STORE          INT NOT NULL		/*1) bodega pf 2)bodega punto*/
);


CREATE TABLE MOVEMENT_HEADER
(
    ID          INT PRIMARY KEY AUTO_INCREMENT,
    DATE_BEGIN  DATE NOT NULL,
	DATE_END	DATE NULL,
	DAYS		INT NOT NULL,
    USER_M      INT NOT NULL, 
	DEBT		INT NOT NULL,	
	DESCRIPTION VARCHAR(255),
	STATUS		INT NOT NULL,	/*0)prestado 1)devuelto*/
    FOREIGN KEY (USER_M) REFERENCES USERS(RUT)
);

CREATE TABLE MOVEMENT_BODY
(
    ID          INT PRIMARY KEY AUTO_INCREMENT,
    PRODUCT_M   INT NULL,
    HEADER      INT NOT NULL,
	QUANTITY	INT NOT NULL,
    FOREIGN KEY(PRODUCT_M) REFERENCES PRODUCT(ID),
    FOREIGN KEY (HEADER) REFERENCES MOVEMENT_HEADER(ID)
)

/*FUNCIONES*/

/*user*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREATE_USER
(
	RUT         INT,
    NAME        VARCHAR(60),
    LASTNAME    VARCHAR(60),
    USERNAME    VARCHAR(255),
	MAIL		VARCHAR(255),
    CAREER      INT,
    PHONE       VARCHAR(12),
    ADDRESS     VARCHAR(255),
    PASS        VARCHAR(255)
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USERS WHERE USERS.RUT = RUT AND USERS.USERNAME = LOWER(USERNAME));
	IF(X = 0) THEN
		INSERT INTO USERS values (RUT,NAME,LASTNAME,USERNAME,MAIL,1,1,CAREER,PHONE,ADDRESS,PASS);
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_USER
(
	RUT         INT,
    NAME        VARCHAR(60),
    LASTNAME    VARCHAR(60),
    USERNAME    VARCHAR(255),
	MAIL		VARCHAR(255),
    CAREER      INT,
    PHONE       VARCHAR(12),
    ADDREES     VARCHAR(255),
    PASS        VARCHAR(255)
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USERS WHERE USERS.RUT = RUT);
	IF X = 1 THEN
		UPDATE USERS SET 
		NAME  = NAME,
		LASTNAME = LASTNAME,
		USERNAME = USERNAME,
		CAREER = CAREER,
		PHONE = PHONE,
		ADDREES = ADDREES,
		MAIL = MAIL,
		PASS = PASS
		WHERE USERS.RUT = RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
end
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_STATUS_USER
(
	RUT		INT,
	STATUS 	INT
)
RETURNS INT 
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USERS WHERE USERS.RUT=RUT);
	IF(X=1) THEN
	
		UPDATE USERS SET USERS.STATUS = STATUS WHERE USERS.RUT= RUT;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_PRIVILEGE_USER
(
	RUT         INT,
    TYPE		INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(RUT) FROM USERS WHERE USERS.RUT=RUT);
	IF(X=1) THEN
    	UPDATE USERS SET 
		USERS.TYPE = TYPE
		WHERE RUT = RUT;
    	RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END;
//


DELIMITER //
CREATE OR REPLACE PROCEDURE SP_LOGIN
(
	IN  VUSERNAME	VARCHAR(255),
	IN	VPASS		VARCHAR(255)
)
BEGIN
	SELECT RUT,NAME,TYPE FROM USERS WHERE USERNAME = LOWER(VUSERNAME) AND PASS = VPASS;
END
//

 /*PRODUCT*/

DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREATE_PRODUCT
(
	NAME            VARCHAR(255),
    DESCRIPTION     VARCHAR(255),
    STOCK           INT,
    PRICE           INT,
    STORE           INT
)
RETURNS INT
BEGIN
    INSERT INTO PRODUCT(NAME, DESCRIPTION, STATUS, STOCK,AVAILABLESTOCK, PRICE, STORE) VALUES(NAME,DESCRIPTION,1,STOCK,STOCK,PRICE,STORE);
    RETURN 1;
end
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_PRODUCT
(
	ID				INT,
	NAME            VARCHAR(255),
    DESCRIPTION     VARCHAR(255),
    PRICE           INT,
    STORE           INT
)
RETURNS INT
BEGIN
    DECLARE X INT;
	SET X = (SELECT COUNT(ID) FROM PRODUCT WHERE PRODUCT.ID = ID);
	IF X = 1 THEN
		UPDATE PRODUCT SET
		NAME = NAME,
		DESCRIPTION = DESCRIPTION,
		PRICE = PRICE,
		STORE = STORE
		WHERE PRODUCT.ID = ID;
		RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
end
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_STATUS_PRODUCT
(
	ID		INT,
	STATUS	INT
)
RETURNS INT 
BEGIN
	DECLARE X INT;
	SET X = (SELECT COUNT(PRODUCT.ID) FROM PRODUCT WHERE PRODUCT.ID = ID);
	IF(X=1) THEN
	
		UPDATE PRODUCT SET PRODUCT.STATUS = STATUS WHERE PRODUCT.ID = ID;
		RETURN 1;
	ELSE
		RETURN 2;
	END IF;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_UPDATE_STOCK_PRODUCT
(
	ID        INT,
	STOCK	  INT
)
RETURNS INT
BEGIN
    UPDATE PRODUCT SET 
	PRODUCT.AVAILABLESTOCK = PRODUCT.AVAILABLESTOCK+(STOCK-PRODUCT.STOCK),
	PRODUCT.STOCK = STOCK
	WHERE PRODUCT.ID = ID;
    RETURN 1;
END
//

/*MOVEMENT HEADER*/
DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREATE_MOVEMENT_HEADER
(
	DATE_BEGIN	 	DATE,
	DESCRIPTION		VARCHAR(255),
	DAYS			INT,
    USER_M      	INT
)
RETURNS INT
BEGIN
    INSERT INTO MOVEMENT_HEADER(DATE_BEGIN, DAYS, USER_M, DESCRIPTION, STATUS, DEBT) VALUES(DATE_BEGIN,DAYS,USER_M,DESCRIPTION,0,0);
    RETURN 1;
END
//

DELIMITER //
CREATE OR REPLACE FUNCTION FN_CHANGE_STATUS_MOVEMENT_HEADER
(
	ID		INT,
	STATUS	INT
)
RETURNS INT
BEGIN
	UPDATE MOVEMENT_HEADER SET MOVEMENT_HEADER.STATUS = STATUS WHERE MOVEMENT_HEADER.ID = ID;
	RETURN 1;
END
//

/*MOVEMENT BODY*/

DELIMITER //
CREATE OR REPLACE FUNCTION FN_CREATE_MOVEMENT_BODY
(
	PRODUCT_M   INT,
    HEADER      INT,
	QUANTITY	INT
)
RETURNS INT
BEGIN
	DECLARE X INT;
	SET X = (SELECT AVAILABLESTOCK FROM PRODUCT WHERE PRODUCT.ID = PRODUCT_M);
	IF (QUANTITY <= X ) THEN
    	INSERT INTO MOVEMENT_BODY(PRODUCT_M, HEADER,QUANTITY) VALUES(PRODUCT_M, HEADER,QUANTITY);
		UPDATE PRODUCT SET PRODUCT.AVAILABLESTOCK = PRODUCT.AVAILABLESTOCK-QUANTITY WHERE PRODUCT.ID = PRODUCT_M;  
    	RETURN 1;
	ELSE 
		RETURN 2;
	END IF;
END
//

/*habilitar eventos*/
SET GLOBAL event_scheduler = ON;

	/*evento para deudas*/

CREATE EVENT `debts` 
ON SCHEDULE 
EVERY 1 DAY STARTS '2019-05-23 00:00:00.000000' 
ON COMPLETION PRESERVE ENABLE 
DO 
UPDATE MOVEMENT_HEADER SET 
DEBT = DATEDIFF(SYSDATE(), ADDDATE(MOVEMENT_HEADER.DATE_BEGIN, INTERVAL MOVEMENT_HEADER.DAYS DAY))*300 
WHERE  ADDDATE(MOVEMENT_HEADER.DATE_BEGIN, INTERVAL MOVEMENT_HEADER.DAYS DAY) < SYSDATE()
